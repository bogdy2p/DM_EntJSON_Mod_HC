<?php

/**
 * @file
 * Allows any entity to be displayed as a JSON object.
 */

define('ENTITY_JSON_MENU', 'admin/config/content/entity_json');

/**
 * Implements hook_permission().
 */
function entity_json_permission() {
  return array(
    'administer entity json' => array(
      'title' => t('Administer Entity JSON'),
      'description' => t('Change which entities can and cannot be displayed as JSON.'),
    ),
    'view entity json' => array(
      'title' => t('View Entities as JSON'),
      'description' => t('View entities printed out as JSON. Note: normal content access premissions will NOT be overried.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function entity_json_menu() {
  $items = array();

  // Create a basic settings page.
  $items[ENTITY_JSON_MENU] = array(
    'title' => 'Entity JSON',
    'description' => 'Configure what entity types can be displayed as JSON objects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('entity_json_settings_page'),
    'access arguments' => array('administer entity json'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Add the JSON object to the node URL by default.
  $items['node/%/json'] = array(
    'title' => 'JSON',
    'page callback' => 'entity_json_menu_callback',
    'page arguments' => array('node', 1),
    'access callback' => 'entity_json_access',
    'access arguments' => array('node', 1),
    'type' => MENU_CALLBACK,
  );

  // Allows the JSON object to be viewed by any entity.
  $items['entity_json/%/%'] = array(
    'title' => 'JSON',
    'page callback' => 'entity_json_menu_callback',
    'page arguments' => array(1, 2),
    'access callback' => 'entity_json_access',
    'access arguments' => array(1, 2),
     'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function entity_json_help($path, $arg) {
  switch ($path) {
    case 'admin/help#entity_json':
      $path = drupal_get_path('module', 'entity_json') . "/README.txt";
      $link = l("README.txt", $path, array('attributes' => array('target' => '_blank')));
      return '<p>' . t('Read the !link file in the module directory for more information.', array('!link' => $link)) . '</p>';
  }
}

/**
 * A basic settings page for Entity JSON.
 *
 * This settings page creates an option for each of the bundles available to be
 * displayed as JSON by the module.
 *
 * @return array
 *   A renderable form array ready for drupal_build_form().
 */
function entity_json_settings_page() {
  $form = array();

  $form['instructions'] = array(
    '#markup' => t('Please select the entity_types that you want to be allowd to be displayed as JSON objects. ', array('@url' => '/entity_json/{entity type}/{entity id}')),
  );

  $bundles = field_info_bundles();
  foreach ($bundles as $bundle => $bundle_data) {
    $form['entity_json_' . $bundle . '_allow'] = array(
      '#type' => 'checkbox',
      '#title' => t($bundle),
      '#default_value' => variable_get('entity_json_' . $bundle . '_allow', FALSE),
    );
  }

  return system_settings_form($form);
}

/**
 * A simple access control function for allowing only certain entity_types.
 *
 * @param string $entity_type
 *   The type of entity that will be called.
 * @param int $entity_id
 *   The id of the entity to be displayed.
 *
 * @return bool
 *   A TRUE or FALSE if that entity can be displayed.
 */
function entity_json_access($entity_type, $entity_id) {
  $allowed = variable_get('entity_json_' . $entity_type . '_allow', FALSE);
  if ($allowed) {
    $entities = entity_load($entity_type, array($entity_id));
    // If no entity is loaded, return false.
    if (empty($entities)) {
      return FALSE;
    }
    $entity = $entities[$entity_id];
    $wrapper = entity_metadata_wrapper($entity_type, $entity);
    return $wrapper->access('view');
  }
  return FALSE;
}

/**
 * A menu callback for pages that only want to display JSON.
 *
 * @param string $entity_type
 *   The type of entity that will be called.
 * @param int $entity_id
 *   The id of the entity to be displayed.
 *
 * @return string
 *   This does NOT return anything, but will stop the current page load from
 *   finishing and display only the JSON returned from entity_json_json.
 */
function entity_json_menu_callback($entity_type, $entity_id, $langcode = NULL) {
  $json = entity_json_json($entity_type, $entity_id, $langcode);
  if ($json === NULL) {
    drupal_not_found();
  }
  else {
    drupal_json_output($json);
    drupal_exit();
  }
}

/**
 * A function to build the JSON encoded string from an entity.
 *
 * @param string $entity_type
 *   The type of entity that will be called.
 * @param int $entity_id
 *   The id of the entity to be displayed.
 *
 * @return array
 *   A full JSON-encoded strong ready for printing on the screem.
 */
function entity_json_json($entity_type, $entity_id, $langcode = NULL) {
  $entities = entity_load($entity_type, array($entity_id));
  if (empty($entities)) {
    return NULL;
  }
  $entity = $entities[$entity_id];
                            //  $proprietati_entitate_cylexvideo = entity_get_property_info($entity_type);
                              //din entitate , printeaza field-urile bundle-ului cu acelasi nume : 
                              //print_r($proprietati_entitate_cylexvideo['cylexvideo']['bundles']['cylexvideo']['properties']);

                            //  $proprietati_cylexvideo = $proprietati_entitate_cylexvideo['bundles']['cylexvideo']['properties'];
                            //  $chei_proprietati_cylexvideo = array();
                            //  foreach ($proprietati_cylexvideo as $key => $values){
                            //    $chei_proprietati_cylexvideo[$key]['1'] = $values['label'];
                            //    $chei_proprietati_cylexvideo[$key]['2'] = $values['type'];
                            //  }
                            //  
                            //  print_r($chei_proprietati_cylexvideo);
  
  $return = array();
  field_attach_prepare_view($entity_type, array($entity_id => $entity), 'full', $langcode);
  entity_prepare_view($entity_type, array($entity_id => $entity), $langcode);
  $content = field_attach_view($entity_type, $entity, 'view', $langcode);
  foreach ($content as $key => $field_data) {
    if (strpos($key, 'field_') === 0) {
      // Get the formatted data for the field.
      $return[$key] = entity_json_json_field_formatter($field_data);
    }
  }
  return $return;
}

/**
 * Format the field values for display in the JSON array.
 *
 * @param array $field_data
 *   An array of field data, ready to be rendered.
 *
 * @return array
 *   An array of each value for the field.
 */
function entity_json_json_field_formatter($field_data) {
  $return = array();  
      foreach ($field_data['#items'] as $key => $value) {
//        $return[$value['value']] = array(
//          $field_data['#title'] => $value['value'],
//          //'markup' => $field_data[$key]['#markup'],
//        );
        
        if(($field_data['#title']) == 'Videodata'){
           $id_colectie = $value['value'];
           $return[] = grab_videodata_details($id_colectie);
          }
        if(($field_data['#title']) == 'Video Name'){
          $id_colectie = $value['value'];
          $return['Setting_Name'] = $id_colectie;
          }
          
        if(($field_data['#title']) == 'Resolution'){
           $id_colectie = $value['value'];
           $return = grab_resolution_details($id_colectie);
          }
        if(($field_data['#title']) == 'Framerate'){
           $id_colectie = $value['value'];
           $return = grab_framerate_details($id_colectie);
          } 
        if(($field_data['#title']) == 'Effect'){
          $id_colectie = $value['value'];
          $return = grab_effect_details($id_colectie);
          }
        if(($field_data['#title']) == 'Audiodata'){
            $id_colectie = $value['value'];
            $return[] = acceseaza_field_collection_audiodata($id_colectie);
          }
      }
      
  return $return;
}

function grab_videodata_details($entity_id, $langcode = NULL) {
  $entities = entity_load('field_collection_item', array($entity_id));
  if (empty($entities)) {
    return NULL;
  }
  $entity = $entities[$entity_id];
  $return = array();
  $content = field_attach_view('field_collection_item', $entity, 'view', $langcode);
    
  foreach ($content as $key => $field_data) {

    if (strpos($key, 'field_fcol2_type') === 0){
     $videodata_type = $field_data['#items'][0]['value'];
     $return['videodata_type'] = $videodata_type;
      switch ($videodata_type) {
        //
        // CASE THE VIDEODATA IS A SEQUENCE
        //
        case 'sequence':
         
          $current_entity = $field_data['#object']->field_fcol2_sequence['und'][0]['value'];
          $current_entity_data = grab_field_collection2($current_entity);
          
            $sequence_type = $current_entity_data['#object']->field_fcol_seq_type['und'][0]['value'];
              $return['sequence_type'] = $sequence_type;
                switch ($sequence_type) {
                  //
                  // CASE THE SEQUENCE IS A IMAGE
                  //
                  case 'image':
                    
                    $ent_img = $current_entity_data['#object']->field_fcol_seq_img['und'][0]['value'];
                    //$return['entitatea_imaginii'] = $ent_img;
                    $ent_img_data = grab_field_collection2($ent_img);
                    $ent_img_data_object = $ent_img_data['#object'];
                    $return['Url_Imagine'] = $ent_img_data_object->field_seq_img_file['und'][0]['uri']; 
                    $return['File Size'] = $ent_img_data_object->field_seq_img_file['und'][0]['filesize']; 
                    $return['Display Length'] = $ent_img_data_object->field_seq_img_len['und'][0]['value']; 
                    $return['incarca_entitate_field_seq_fc_text'] = $ent_img_data_object->field_seq_fc_text['und'][0]['value']; 
                    //Aici va trebuii sa incarcam entitatea pentru field-ul de TEXT OVER , si sa verificam existenta. In caz ca exista , punem in return !
                    //Aici va trebuii sa incarcam entitatea pentru field-ul de TEXT OVER , si sa verificam existenta. In caz ca exista , punem in return !
                        $entitate_text = $return['incarca_entitate_field_seq_fc_text'];
                        $entitate_text_data = grab_field_collection2($entitate_text);
                        $entitate_text_data_object = $entitate_text_data['#object'];
                        $confirm_add_text = $entitate_text_data_object->field_add_text_confirmation['und'][0]['value'];
                        $return['textover_confirmation'] = $confirm_add_text;
                        //echo $confirm_add_text;
                        if ($confirm_add_text == 1) {
                          $return['textarea_to_add_value'] = $entitate_text_data_object->field_add_text_textarea['und'][0]['value'];
                        }else{
                          $return['textarea_to_add_value'] = '0';
                        }
                        //$return['textover_confirmation'] = $entitate_text_data_object->field_add_text_confirmation['und'][0][value]; 
                        //$return['textarea_to_add_value'] = $entitate_text_data_object->field_add_text_textarea['und'][0][value]; 
                  break;     
                  //
                  // CASE THE SEQUENCE IS A BGCOLOR
                  //
                  case 'bgcolor':
                    $ent_bgcol = $current_entity_data['#object']->field_fcol_seq_bgcol['und'][0]['value'];
                    //$return['entitatea_bcgol'] = $ent_bgcol;
                    $ent_bgcol_data = grab_field_collection2($ent_bgcol);
                    $ent_bgcol_data_object = $ent_bgcol_data['#object'];
                    $return['Culoare_background'] = $ent_bgcol_data_object->field_seq_bgc_color['und'][0]['rgb'];
                    $return['timp_display_bgcol'] = $ent_bgcol_data_object->field_seq_bgc_len['und'][0]['value'];
                    $return['incarca_entitate_field_seq_fc_text'] = $ent_bgcol_data_object->field_seq_fc_text['und'][0]['value'];
                        $entitate_text = $return['incarca_entitate_field_seq_fc_text'];
                        $entitate_text_data = grab_field_collection2($entitate_text);
                        $entitate_text_data_object = $entitate_text_data['#object'];
                         $confirm_add_text = $entitate_text_data_object->field_add_text_confirmation['und'][0]['value'];
                        $return['textover_confirmation'] = $confirm_add_text;
                        //echo $confirm_add_text;
                        if ($confirm_add_text == 1) {
                          $return['textarea_to_add_value'] = $entitate_text_data_object->field_add_text_textarea['und'][0]['value'];
                        }else{
                          $return['textarea_to_add_value'] = '0';
                        }
                        //$return['textover_confirmation'] = $entitate_text_data_object->field_add_text_confirmation['und'][0][value]; 
                        //$return['textarea_to_add_value'] = $entitate_text_data_object->field_add_text_textarea['und'][0][value];
                  break;
                  //
                  // CASE THE SEQUENCE IS A VIDEO
                  //
                  case 'video':
                    $ent_vid = $current_entity_data['#object']->field_fcol_seq_vid['und'][0]['value'];
                    //$return['entitatea_videoului'] = $ent_vid;
                    $ent_vid_data = grab_field_collection2($ent_vid);
                    $ent_vid_data_object = $ent_vid_data['#object'];
                    $return['nume_fisier_video'] = $ent_vid_data_object->field_seq_vid_file['und'][0]['filename'];
                    $return['url_fisier_video'] = $ent_vid_data_object->field_seq_vid_file['und'][0]['uri'];
                    $return['size_fisier_video'] = $ent_vid_data_object->field_seq_vid_file['und'][0]['filesize'];
                    $return['timestamp_fisier_video'] = $ent_vid_data_object->field_seq_vid_file['und'][0]['timestamp'];
                    $return['seq_vid_start'] = $ent_vid_data_object->field_seq_vid_start['und'][0]['value'];
                    $return['seq_vid_length'] = $ent_vid_data_object->field_seq_vid_lenght['und'][0]['value'];
                    $return['seq_vid_audio'] = $ent_vid_data_object->field_seq_vid_audio['und'][0]['value'];
                    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!/
                    // Aici trebuie facuta verificarea pentru AUDIO VOLUME. daca seq_vid_audio = 0 => seq_vid_vol = 0.
                    //Daca nu , seq_vid_volume e valoarea din db.
                    //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!//
                    $return['seq_vid_volume'] = $ent_vid_data_object->field_seq_vid_vol['und'][0]['value'];
                    $return['incarca_entitate_field_seq_fc_text'] = $ent_vid_data_object->field_seq_fc_text['und'][0]['value'];
                        $entitate_text = $return['incarca_entitate_field_seq_fc_text'];
                        $entitate_text_data = grab_field_collection2($entitate_text);
                        $entitate_text_data_object = $entitate_text_data['#object'];
                        $confirm_add_text = $entitate_text_data_object->field_add_text_confirmation['und'][0]['value'];
                        $return['textover_confirmation'] = $confirm_add_text;
                        //echo $confirm_add_text;
                        if ($confirm_add_text == 1) {
                          $return['textarea_to_add_value'] = $entitate_text_data_object->field_add_text_textarea['und'][0]['value'];
                        }else{
                          $return['textarea_to_add_value'] = '0';
                        }
                  break;  
                }
          
          break;
          //
        // CASE THE VIDEODATA IS A TRANSITION
        //
          case 'transition':
          $return['entitatea'] = $field_data['#object']->field_fcol2_transition['und'][0]['value'];
           $ent_transition = $field_data['#object']->field_fcol2_transition['und'][0]['value'];
           $ent_transition_data = grab_field_collection2($ent_transition);
           $ent_transition_data_object = $ent_transition_data['#object'];
           //$return['date_obiect_tranz'] = $ent_transition_data;
           $return['tip_tranzitie'] = $ent_transition_data['#object']->field_transition_type['und'][0]['value'];
           $return['transition_length'] = $ent_transition_data['#object']->field_transition_length['und'][0]['value'];
            
          break;
          //
        // CASE THE VIDEODATA IS A EFFECT
        //
          case 'effect':
          $return['entitatea'] = $field_data['#object']->field_fcol2_effect['und'][0]['value'];
           $ent_effect = $field_data['#object']-> field_fcol2_effect['und'][0]['value'];
           $ent_effect_data = grab_field_collection2($ent_effect);
           $ent_effect_data_object = $ent_effect_data['#object'];          
           $return['effect_type'] = $ent_effect_data_object->field_effect_type['und'][0]['value'];
           $return['effect_start'] = $ent_effect_data_object->field_effect_start['und'][0]['value'];
           $return['effect_length'] = $ent_effect_data_object->field_effect_length['und'][0]['value'];

          break;
      } //  END OF switch ($return['fieldtype_val'])
    } // END OF  if (strpos($key, 'field_fcol2_type') === 0)
 }// END OF foreach ($content as $key => $field_data)
  return $return;
}


function acceseaza_field_collection_audiodata($entity_id, $langcode = NULL){
   $entities = entity_load('field_collection_item', array($entity_id));
  if (empty($entities)) {return NULL;}
  $entity = $entities[$entity_id];
  $return = array();
  $content = field_attach_view('field_collection_item', $entity, 'view', $langcode);
  
  foreach ($content as $key => $field_data) {
     if(strpos($key, 'field') === 0){
       $entitatea_incarcata = $field_data['#object'];              
     }
     $return['File_name'] = $entitatea_incarcata->field_audio_file['und'][0]['filename'];
     $return['File_url'] = $entitatea_incarcata->field_audio_file['und'][0]['uri'];
     $return['File_size'] = $entitatea_incarcata->field_audio_file['und'][0]['filesize'];
     $return['Audio_start'] = $entitatea_incarcata->field_audio_start['und'][0]['value'];
     $return['Audio_length'] = $entitatea_incarcata->field_audio_len['und'][0]['value'];
     $return['Audio_volume'] = $entitatea_incarcata->field_audio_vol['und'][0]['value'];
   }
  return $return;
}

function grab_resolution_details($entity_id, $langcode = NULL){
  $entities = entity_load('field_collection_item', array($entity_id));
  if (empty($entities)) {return NULL;}
  $entity = $entities[$entity_id];
  $content = field_attach_view('field_collection_item', $entity, 'view', $langcode);
  foreach ($content as $key => $field_data) {
    if(strpos($key, 'field_') === 0){
           $date_resolution['Setting_Width'] = $field_data['#object']->field_cylexvideo_width['und'][0]['value'];
           $date_resolution['Setting_Height'] = $field_data['#object']->field_cylexvideo_height['und'][0]['value'];
    }
  }
  return $date_resolution;
}

function grab_framerate_details($entity_id, $langcode = NULL){
  $entities = entity_load('field_collection_item', array($entity_id));
  if (empty($entities)) {return NULL;}
  $entity = $entities[$entity_id];
  $content = field_attach_view('field_collection_item', $entity, 'view', $langcode);
  foreach ($content as $key => $field_data) {
    if(strpos($key, 'field_') === 0){
            $date_framerate['Setting_Framerate'] = $field_data['#object']->field_cylexvideo_fps['und'][0]['value'];
    }
  }
  return $date_framerate;
}

function grab_effect_details($entity_id, $langcode = NULL){
  $entities = entity_load('field_collection_item', array($entity_id));
  if (empty($entities)) {return NULL;}
  $entity = $entities[$entity_id];
  $content = field_attach_view('field_collection_item', $entity, 'view', $langcode);          
  
  foreach ($content as $key => $field_data) {
    if(strpos($key, 'field_') === 0){
            $date_effect['Setting_Effect_Type/Title'] = $field_data['#object']->field_effect_type['und'][0]['value'];
            // Aici da notice : undefined index daca las value cu '   ' ;
            $date_effect['Setting_Effect_Start'] = $field_data['#object']->field_effect_start['und'][0]['value'];
            $date_effect['Setting_Effect_Length'] = $field_data['#object']->field_effect_length['und'][0]['value'];
    }
  }
  return $date_effect;
}


function grab_field_collection2($entity_id, $langcode = NULL){
  $entities = entity_load('field_collection_item', array($entity_id));
  if (empty($entities)) {return NULL;}
  $entity = $entities[$entity_id];
  $return = array();
  $content = field_attach_view('field_collection_item', $entity, 'view', $langcode);
  foreach ($content as $key => $field_data) {
    if (strpos($key, 'field') === 0){
     $date_field_collection_tertiar = $field_data;
    }
  }
  return $date_field_collection_tertiar;
}